name: Deploy Staging

on:
  push:
    branches:
      - develop

jobs:
  install: # Runs install once before everything to create & save cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-deploy-staging-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deploy-staging-
            ${{ runner.os }}-
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
  deploy-react:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-deploy-staging-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deploy-staging-
            ${{ runner.os }}-
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - name: publish sdk
        working-directory: ./packages/react
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
  deploy-example:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-deploy-staging-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deploy-staging-
            ${{ runner.os }}-
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "SENTRY_DNS"
          value: ${{secrets.SENTRY_EXAMPLE_DNS}}
          envPath: "packages/example/.env"
      - uses: TickX/var-to-dotenv@v1.1.1
        with:
          key: "API_ENDPOINT"
          value: ${{secrets.API_ENDPOINT_STAGING}}
          envPath: "packages/example/.env"
      - name: build
        run: yarn build
      - name: deploy
        working-directory: ./packages/example
        run: yarn aws:profile:set --stage staging && yarn deploy:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_SDK }}
          SLACK_CHANNEL: deploys
          SLACK_TITLE: sbs-service-template/example deployed
  deploy-api:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-deploy-staging-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deploy-staging-
            ${{ runner.os }}-
      - run: echo '@amfa-team:registry=https://npm.pkg.github.com' > .npmrc
      - run: yarn install
      - name: serverless deploy
        working-directory: ./packages/api
        run: yarn aws:profile:set --stage staging && yarn deploy:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SENTRY_DNS: ${{ secrets.SENTRY_API_DNS }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID_STAGING }}
          TWILIO_API_KEY_SID: ${{ secrets.TWILIO_API_KEY_SID_STAGING }}
          TWILIO_API_KEY_SECRET: ${{ secrets.TWILIO_API_KEY_SECRET_STAGING }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN_STAGING }}
          MONGO_DB_URL: ${{ secrets.MONGO_DB_URL_STAGING }}
          API_ENDPOINT: ${{ secrets.API_ENDPOINT_STAGING }}
          SECRET: ${{ secrets.API_SECRET_STAGING }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
